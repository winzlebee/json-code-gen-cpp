{%macro NestedObjectName(name) -%}
    {{-name | UpperCamelCase-}}
{%-endmacro%}
{%-macro ObjectType(propName, propSchema) -%}
    {%-if '$ref' in propSchema -%}
        {{-loader.Reference(resolver, propSchema['$ref'])-}}
    {%-else-%}
        {{-NestedObjectName(propName)-}}
    {%-endif-%}
{%-endmacro%}
{%-macro ObjectName(propName, propSchema) -%}
    {%-if '$ref' in propSchema -%}
        {{-resolver.cpp_get_name(propSchema['$ref'])|UpperCamelCase-}}
    {%-else-%}
        {{-NestedObjectName(propName)-}}
    {%-endif-%}
{%-endmacro%}
{%-set exception %}{{resolver.cpp_get_lib_ns() | join('::')}}::JsonSchemaException{%endset%}

/*! \class {{Name}}
 * \brief Optional union of: {%for s in schema.anyOf %}{%set componentName%}Component{{loop.index}}{%endset%}{{ObjectName(componentName, s)}}{%if not loop.last%}, {%endif%}{%endfor %}
 {%-if schema.description %}
 * {{schema.description}}
 {%-endif%}
 */
class {{Name}}
{
public:
    {%-import 'loader.jinja2' as loader%}
    {%-for s in schema.anyOf %}{%set componentName%}Component{{loop.index}}{%endset%}
    {{loader.Class('hpp', resolver, [Name], componentName, s) | indent(4) }}
    
    {%endfor%}

    /*! Constructor for {{Name}}
     * Since all components are optional, this is an empty constructor.
     */
    {{Name}}();
    virtual ~{{Name}}() = default;

    {%-for s in schema.anyOf %}{%set componentName%}Component{{loop.index}}{%endset%}
    /*! \fn boost::optional<{{ObjectType(componentName, s)}}> Get{{ObjectName(componentName, s)}}() const
     * \brief Gets the {{ObjectType(componentName, s)}} component of the {{Name}} object, if present.
     */
    boost::optional<{{ObjectType(componentName, s)}}> Get{{ObjectName(componentName, s)}}() const;

    /*! \fn void Set{{ObjectName(componentName, s)}}(const {{ObjectType(componentName, s)}}& component)
     * \brief Sets the {{ObjectType(componentName, s)}} component of {{Name}} object.
     * \param {{ObjectType(componentName, s)}} component is copied into the storage for this class.
     */
    void Set{{ObjectName(componentName, s)}}(const {{ObjectType(componentName, s)}}& component);
    {%endfor%}

    /*! \fn {{Name}} FromJson(const boost::json::value& json)
     * \brief Deserializes JSON into a new instance of the {{Name}} object.
     * \param json is the boost::json value which must be of object type and conforming to the schema.
     * \returns {{Name}}
     */
    static {{Name}} FromJson(const boost::json::value& json);

    /*! \fn ToJson(boost::json::value& value)
     * \brief Serializes the combination of any set components to JSON
     * \param allocator is the top-level boost::json document allocator which may be used for allocations
     */
    void ToJson(boost::json::value& value) const;

    /*! Sets a string handle associated with this {{Name}} instance.
     * This gets called by a parent object after creating an instance that is used for an object's property.
     * \param handle is the string name.
     */
    void SetHandle(const std::string& handle);

    /*! Gets the string handle associated with this {{Name}} instance.
     * This is often the property name used in a JSON-object parent.
     * It may be empty.
     * \returns the handle string
     */
    std::string GetHandle() const;
private:
    {%-for s in schema.anyOf %}{%set componentName%}Component{{loop.index}}{%endset%}
    boost::optional<{{ObjectType(componentName, s)}}> {{componentName|privatize}};
    {%-endfor%}
    std::string _handle;

    {%-if schema.requiredProperties | length > 0 %}
    
    /*! Checks to make sure any required properties defined in the 'anyOf' list are missing.
     * \param json Is completed JSON-object structure.
     * \throws {{exception}} If a property is missing
     */
    static void ThrowIfMissingRequiredProperties(const boost::json::value& json);
    {%-endif%}
};
